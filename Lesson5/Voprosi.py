#1 - a
X = 1
Y = 1
Z = 0
if X > 0 :
   if Y > 0 :
      Z = 1
      print("z = " + str(Z))
   else :
      Z = 2
      print("z = " + str(Z))
#Здесь X=1 и Y=1, оба условия (X > 0) и (Y > 0) выполняются, поэтому Z присваивается значение 1.

# 1 - b
X = 1
Y =- 1
Z = 0
if X > 0:
   if Y > 0:
      Z = 1
      print("z = " + str(Z))
   else :
      Z = 2
      print("z = " + str(Z))
#Здесь X=1, но Y=-1, поэтому первое условие (X > 0) выполняется, но второе (Y > 0) не выполняется. Z присваивается значение 2.

# 1 - c X=-1, Y=1
X =- 1
Y = 1
Z = 0
if X > 0 :
   if Y > 0 :
      Z = 1
      print("z = " + str(Z))
   else :
      Z = 2
      print("z = " + str(Z))

# Здесь X=-1, поэтому первое условие (X > 0) не выполняется. Z остается равным 0.


#2. Оператор присваивания X=A or B and C:
A = 0
B = 0
C = 0
X = A or (B and C)
"""
Этот оператор присваивания эквивалентен логическому выражению. В Python операторы сравнения и логические операторы имеют приоритет, и and имеет более высокий приоритет, чем or. Поэтому скобки вокруг B and C гарантируют, что оператор and будет выполнен первым, а затем результат будет использован в выражении с or.

#Если A истинно, то результат всегда будет True, независимо от значений B и C, так как or вернет True, не обращая внимание на результат выражения после него. Если A ложно, то значение X будет равно результату выражения B and C.
"""
# 3. Оператор присваивания, эквивалентный if-else:
if A:
    X = B
else:
    X = C
"""Этот оператор присваивания также представляет собой сокращенную форму условного выражения. Он говорит: "Если условие A истинно, то присвоить переменной X значение B, иначе присвоить значение C".



Если A истинно, то переменной X будет присвоено значение B.
Если A ложно, то переменной X будет присвоено значение C.
Это конструкция удобна, когда нужно присвоить переменной значение в зависимости от какого-то условия. В данном случае, она эквивалентна следующему if-else выражению:
"""

#4. Синтаксис условного оператора:
#if условие:
    # код, который выполняется, если условие истинно
#elif другое_условие:
    # код, который выполняется, если другое_условие истинно
#else:
    # код, который выполняется, если ни одно из условий не истинно


#5. Вычисление выражений:

# Выражения
result1 = 123 // 10
result2 = -123 // 10
result3 = 123 % -10
result4 = -123 % -10

# Вывод результатов
print("123 // 10 =", result1)
print("-123 // 10 =", result2)
print("123 % -10 =", result3)
print("-123 % -10 =", result4)
